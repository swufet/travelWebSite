<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd 
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd" >
 	<context:component-scan base-package="com.travel"></context:component-scan>
 	<!-- 启动Spring MVC 的注解功能，完成请求和注解POJO 的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>
	
    <!-- 开启这个配置，spring才能识别@Scheduled注解   -->
    <task:annotation-driven scheduler="qbScheduler" mode="proxy" />  
    <task:scheduler id="qbScheduler" pool-size="10" />
    
    
    <!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 -->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
 	<!-- c3p0数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<!-- 数据库连接  47c593a5-1a6c-4e91-a225-ff36af3536a5-->
		<property name="driverClass" value="org.hsqldb.jdbcDriver" />
		<property name="jdbcUrl" value="jdbc:hsqldb:hsql://localhost/traveldb;shutdown=true" />
		<property name="user" value="SA" />
		<property name="password" value="47c593a5-1a6c-4e91-a225-ff36af3536a5" />
		<!-- c3p0 配置 -->
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />
		<property name="acquireRetryDelay" value="1000" />
		<property name="autoCommitOnClose" value="false" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。
			但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。
			如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。
			Default: false -->
		<property name="breakAfterAcquireFailure" value="false" />
		<property name="checkoutTimeout" value="5000" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。
			Default: 3 -->
		<property name="initialPoolSize" value="10" />
		<property name="loginTimeout" value="1800" />
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="5" />
		<!--连接池中保留的最大连接数。
			Default: 15 -->
		<property name="maxPoolSize" value="15" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。
			若为0则永不丢弃。
			Default: 0 -->
		<property name="maxIdleTime" value="60" />
		<property name="maxStatements" value="100" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。
			但由于预缓存的statements 属于单个connection而不是整个连接池。
			所以设置这个参数需要考虑到多方面的因素。
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。
			Default: 0 -->
		<property name="maxStatementsPerConnection" value="100" />
		<property name="numHelperThreads" value="3" />
		<property name="propertyCycle" value="300" />
		<property name="preferredTestQuery" value="true" />
		<property name="testConnectionOnCheckin" value="true" />
 		<!--因性能消耗大请只在需要的时候使用它。
 			如果设为true那么在每个connection提交的 时候都将校验其有效性。
 			建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。
 			Default: false -->
		<property name="testConnectionOnCheckout" value="false" />
		<property name="usesTraditionalReflectiveProxies" value="false" />
	</bean>
	<!-- 配置数据源结束 -->
	
	<!-- 支持aop注解 -->
	<aop:aspectj-autoproxy />	
	<!-- 配置session工厂 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 引用的数据库 -->
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<!-- 这里需要再配置一下数据库用户名和密码 -->
				<!-- 数据库连接 -->
				<prop key="hibernate.connection.username">SA</prop>
				<prop key="hibernate.connection.password">47c593a5-1a6c-4e91-a225-ff36af3536a5</prop>
				
				<!-- 方言 -->
				<prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
				<!-- session -->
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate5.SpringSessionContext</prop>
				<!-- 缓存 -->
				<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop>  
				<!-- 后台输出SQL语句 -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- 后台输出SQL语句时格式化 -->
				<prop key="hibernate.format_sql">true</prop>
				<!-- 数据库表的操作 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- javax.persistence.validation.mode默认情况下是auto的，
				就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包 
          		所以把它设置为none即可 -->
				<!-- <prop key="javax.persistence.validation.mode">none</prop> -->
				
				<!-- hibernate从数据库检索元数据 ，关掉这个就不会出现
				Hibernate : Disabling contextual LOB creation as createClob() method threw error
				-->
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
				<!-- 开启getCurrentSession -->
			</props>
		</property>
		<!-- 自动扫描的包 -->
		<property name="packagesToScan">
			<list>
				<value>com.travel.entity</value>
				<value>com.travel.dao</value>
				<value>com.travel.service</value>
				<value>com.travel.controller</value>
			</list>
		</property>
		
	</bean>
	
	<!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 -->
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
		
	<!-- hibernate5 事务管理 -->
	<bean id="txManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven transaction-manager="txManager"/>  
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename">
			<value>messages</value>
		</property>
	</bean>
 
 </beans>